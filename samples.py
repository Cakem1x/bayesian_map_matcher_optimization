#!/usr/bin/env python3

##########################################################################
# Copyright (c) 2017 German Aerospace Center (DLR). All rights reserved. #
# SPDX-License-Identifier: BSD-2-Clause                                  #
##########################################################################

"""
Contains classes that define what a sample is.
Samples are used to define an objective function (see objective_function.py) via discrete observations of that function.
"""

class MapMatcherSample(object):
    """
    Represents a sample generated by a map matcher.
    A MapMatcherSample contains relevant data to determine the quality of a single map matcher evaluation run on the complete dataset.
    Currently, that data consists of the following properties:
        * nr_matches: The number of matches found on the dataset.
        * translation_errors: A list of translation errors per match (meters).
        * rotation_errors: A list of rotation errors per match (degree).
        *---> Translation error n and rotation error n are both expected to be the result of match n.
        * duration: A datetime.timedelta object, which contains the duration it took to generate the sample.
    """

    def __init__(self):
        """
        Creates a function sample object with empty data contents.
        Fill with available data by accessing its propteries.
        All data fields are initialized with None here, so the code will crash if you use
        metrics on samples which don't have the data they need. (instead of generating wrong results)
        """
        # Fields to determine map matcher performance
        self.translation_errors = None
        self.rotation_errors = None
        self.duration = None
        # Other fields, e.g. for user output
        self.name = None

    @property
    def nr_matches(self):
        """
        The number of matches the map matcher made with this Sample's parameters.
        """
        assert(len(self.translation_errors) == len(self.rotation_errors))
        return len(self.translation_errors)

